#version 450

#define WORKGROUP_SIZE 16
layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

#define WIDTH 1600
#define HEIGTH 900

layout(push_constant) uniform PushConstantsBlock
{
    float mTime;
    float mScale;
    float mRayLength;
} PushConstants;

layout ( binding = 0, r32ui ) uniform uimage2D outImage;

#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)
#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)
#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)
#define hash2x3(p) fract(sin((p)*mat3x2(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123)

int redValue( int x )
{
    return x;
}

int greenValue( int x )
{
    return x * 256;
}

int blueValue( int x )
{
    return x * 256 * 256;
}

// Rotation matrix around the X axis.
mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(1, 0, 0),
    vec3(0, c, -s),
    vec3(0, s, c)
    );
}

// Rotation matrix around the Y axis.
mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(c, 0, s),
    vec3(0, 1, 0),
    vec3(-s, 0, c)
    );
}

// Rotation matrix around the Z axis.
mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
    vec3(c, -s, 0),
    vec3(s, c, 0),
    vec3(0, 0, 1)
    );
}

// Identity matrix.
mat3 identity() {
    return mat3(
    vec3(1, 0, 0),
    vec3(0, 1, 0),
    vec3(0, 0, 1)
    );
}

void drawLine( vec2 a, vec2 b )
{
    vec2 pos = a;
    vec2 direction = normalize( b - a );
    int length = int( distance( a, b ) );

    for( int i = 0; i < length; i++ )
    {
        pos += direction;

        if( pos.x < 0 || pos.x >= WIDTH * 2 || pos.y < 0 || pos.y >= HEIGTH * 2 )
            continue;

        imageAtomicAdd( outImage, ivec2( pos ), redValue( 400 ) );
    }
}


void main()
{
    vec2 randDir = normalize( vec2( hash2( vec2( gl_GlobalInvocationID.xy ) ) ) * 2.0f - 1.0f );
    float randLength = hash( gl_GlobalInvocationID.xy );
    vec2 size = vec2( WIDTH, HEIGTH );
    vec3 pos = vec3( randDir * randLength * size * PushConstants.mScale, 0 );

    vec2 dir = normalize( vec2( 1, -1) );

    vec3 pos2 = pos + vec3( dir.x, 0, dir.y ) * PushConstants.mRayLength;

    pos = rotateY( PushConstants.mTime / 1000.0f ) * pos;
    pos2 = rotateY( PushConstants.mTime / 1000.0f ) * pos2;

    pos += vec3( size / 2.0f, 0 );
    pos2 += vec3( size / 2.0f, 0 );

    drawLine( ivec2( pos.x, pos.y ), ivec2( pos2.x, pos2.y ) );
}