#version 450

#define WORKGROUP_SIZE 16
layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

#define WIDTH 800
#define HEIGTH 600

layout ( binding = 0, r32ui ) uniform uimage2D outImage;

#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)
#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)
#define hash3(p) fract(sin((p)*mat3(127.1,311.7, 74.7,  269.5,183.3,246.1,  113.5,271.9,124.6))*43758.5453123)
#define hash2x3(p) fract(sin((p)*mat3x2(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123)

int redValue( int x )
{
    return x;
}

int greenValue( int x )
{
    return x * 256;
}

int blueValue( int x )
{
    return x * 256 * 256;
}

void drawRay( vec2 origin, vec2 direction, int length )
{
    vec2 pos = origin;
    for( int i = 0; i < length; i++ )
    {
        pos += direction;
        imageAtomicAdd( outImage, ivec2( pos ), redValue( 100 ) );
    }
}

void main()
{
    ivec2 pos = ivec2( hash2( vec2( gl_GlobalInvocationID.xy ) ) * vec2( WIDTH * 2, HEIGTH * 2 ) );
//    ivec2 pos = ivec2( gl_GlobalInvocationID.xy * vec2( WIDTH * 2, HEIGTH * 2 ) + vec2( 500 ) );

    vec2 dir = normalize( vec2( 1, -1) );
//   dir = normalize( vec2( hash2( vec2( gl_GlobalInvocationID.xy ) )  ) );

    drawRay( pos, dir, 100 );

}